<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Functional.CQS.AOP.IoC.SimpleInjector</name>
    </assembly>
    <members>
        <member name="T:SimpleInjector.ContainerExtensions">
            <summary>
            Extension methods for <see cref="T:SimpleInjector.Container"/>.
            </summary>
        </member>
        <member name="M:SimpleInjector.ContainerExtensions.RegisterAllFunctionalCQSHandlers(SimpleInjector.Container,SimpleInjector.Lifestyle,System.Reflection.Assembly[])">
            <summary>
            Registers all <see cref="T:Functional.CQS.IQueryHandler`2"/>, <see cref="T:Functional.CQS.IAsyncQueryHandler`2"/>, <see cref="T:Functional.CQS.ICommandHandler`2"/>, <see cref="T:Functional.CQS.IAsyncCommandHandler`2"/> 
            implementations defined across the specified <paramref name="assemblies"/>.  All handler implementations will be registered with the specified <paramref name="lifestyle"/>.
            </summary>
            <param name="container">The container.</param>
            <param name="lifestyle">The lifestyle.</param>
            <param name="assemblies">The assemblies containing IQ.Vanilla.CQS handler implementations.</param>
        </member>
        <member name="T:SimpleInjector.DecoratorPredicateContextExtensions">
            <summary>
            Extension methods for <see cref="T:SimpleInjector.DecoratorPredicateContext"/>.
            </summary>
        </member>
        <member name="M:SimpleInjector.DecoratorPredicateContextExtensions.ToServiceAndImplementationType(SimpleInjector.DecoratorPredicateContext)">
            <summary>
            Maps <see cref="T:SimpleInjector.DecoratorPredicateContext"/> to <see cref="T:Functional.CQS.AOP.IoC.SimpleInjector.Models.ServiceAndImplementationType"/>.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="T:Functional.CQS.AOP.IoC.SimpleInjector.DecoratorRegistrationGateways.ConventionBasedDecoratorRegistrationGateway">
            <summary>
            Gateway for applying decorators to IQ.Vanilla.CQS handler implementations that have been registered via convention.
            </summary>
        </member>
        <member name="M:Functional.CQS.AOP.IoC.SimpleInjector.DecoratorRegistrationGateways.ConventionBasedDecoratorRegistrationGateway.#ctor(SimpleInjector.Container,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},SimpleInjector.Lifestyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Functional.CQS.AOP.IoC.SimpleInjector.DecoratorRegistrationGateways.ConventionBasedDecoratorRegistrationGateway"/> class.
            </summary>
            <param name="container">The container containing prior registration of IQ.Vanilla.CQS handler implementations.</param>
            <param name="assemblies">The collection of assemblies to scan for performing further registrations.</param>
            <param name="lifestyle">The lifestyle that was specified when registering all IQ.Vanilla.CQS handler implementations.</param>
        </member>
        <member name="P:Functional.CQS.AOP.IoC.SimpleInjector.DecoratorRegistrationGateways.ConventionBasedDecoratorRegistrationGateway.Container">
            <summary>
            Gets the container holding prior registration of <see cref="T:Functional.CQS.IQueryHandler`2"/>.
            </summary>
        </member>
        <member name="P:Functional.CQS.AOP.IoC.SimpleInjector.DecoratorRegistrationGateways.ConventionBasedDecoratorRegistrationGateway.AssemblyCollection">
            <summary>
            Gets the collection of assemblies to scan for performing further registrations.
            </summary>
        </member>
        <member name="P:Functional.CQS.AOP.IoC.SimpleInjector.DecoratorRegistrationGateways.ConventionBasedDecoratorRegistrationGateway.Lifestyle">
            <summary>
            Gets the lifestyle that was specified for the original <see cref="T:Functional.CQS.IQueryHandler`2"/> registration.
            </summary>
        </member>
        <member name="M:Functional.CQS.AOP.IoC.SimpleInjector.DecoratorRegistrationGateways.ConventionBasedDecoratorRegistrationGateway.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns></returns>
        </member>
        <member name="M:Functional.CQS.AOP.IoC.SimpleInjector.DecoratorRegistrationGateways.ConventionBasedDecoratorRegistrationGateway.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Functional.CQS.AOP.IoC.SimpleInjector.DecoratorRegistrationGateways.ConventionBasedDecoratorRegistrationGateway.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Functional.CQS.AOP.IoC.SimpleInjector.Models.CommandAndErrorType">
            <summary>
            Encapsulates the command and error types associated with <see cref="T:Functional.CQS.ICommandHandler`2"/> and <see cref="T:Functional.CQS.IAsyncCommandHandler`2"/>.
            </summary>
        </member>
        <member name="M:Functional.CQS.AOP.IoC.SimpleInjector.Models.CommandAndErrorType.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Functional.CQS.AOP.IoC.SimpleInjector.Models.CommandAndErrorType"/> class.
            </summary>
            <param name="commandType">The command type.</param>
            <param name="errorType">The error type.</param>
        </member>
        <member name="P:Functional.CQS.AOP.IoC.SimpleInjector.Models.CommandAndErrorType.CommandType">
            <summary>
            Gets the command type.
            </summary>
        </member>
        <member name="P:Functional.CQS.AOP.IoC.SimpleInjector.Models.CommandAndErrorType.ErrorType">
            <summary>
            Gets the error type.
            </summary>
        </member>
        <member name="M:Functional.CQS.AOP.IoC.SimpleInjector.Models.CommandAndErrorType.Equals(Functional.CQS.AOP.IoC.SimpleInjector.Models.CommandAndErrorType)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns></returns>
        </member>
        <member name="M:Functional.CQS.AOP.IoC.SimpleInjector.Models.CommandAndErrorType.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns></returns>
        </member>
        <member name="M:Functional.CQS.AOP.IoC.SimpleInjector.Models.CommandAndErrorType.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Functional.CQS.AOP.IoC.SimpleInjector.Models.QueryAndResultType">
            <summary>
            Encapsulates the query and result types associated with <see cref="T:Functional.CQS.IQueryHandler`2"/> and <see cref="T:Functional.CQS.IAsyncQueryHandler`2"/>.
            </summary>
        </member>
        <member name="M:Functional.CQS.AOP.IoC.SimpleInjector.Models.QueryAndResultType.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Functional.CQS.AOP.IoC.SimpleInjector.Models.QueryAndResultType"/> class.
            </summary>
            <param name="queryType">The query type.</param>
            <param name="resultType">The result type.</param>
        </member>
        <member name="P:Functional.CQS.AOP.IoC.SimpleInjector.Models.QueryAndResultType.QueryType">
            <summary>
            Gets the query type.
            </summary>
        </member>
        <member name="P:Functional.CQS.AOP.IoC.SimpleInjector.Models.QueryAndResultType.ResultType">
            <summary>
            Gets the result type.
            </summary>
        </member>
        <member name="M:Functional.CQS.AOP.IoC.SimpleInjector.Models.QueryAndResultType.Equals(Functional.CQS.AOP.IoC.SimpleInjector.Models.QueryAndResultType)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns></returns>
        </member>
        <member name="M:Functional.CQS.AOP.IoC.SimpleInjector.Models.QueryAndResultType.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns></returns>
        </member>
        <member name="M:Functional.CQS.AOP.IoC.SimpleInjector.Models.QueryAndResultType.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Functional.CQS.AOP.IoC.SimpleInjector.Models.ServiceAndImplementationType">
            <summary>
            Encapsulates a service type and its associated implementation type.
            </summary>
        </member>
        <member name="M:Functional.CQS.AOP.IoC.SimpleInjector.Models.ServiceAndImplementationType.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Functional.CQS.AOP.IoC.SimpleInjector.Models.ServiceAndImplementationType"/> struct.
            </summary>
            <param name="serviceType"></param>
            <param name="implementationType"></param>
        </member>
        <member name="P:Functional.CQS.AOP.IoC.SimpleInjector.Models.ServiceAndImplementationType.ServiceType">
            <summary>
            Gets the service type.
            </summary>
        </member>
        <member name="P:Functional.CQS.AOP.IoC.SimpleInjector.Models.ServiceAndImplementationType.ImplementationType">
            <summary>
            Gets the implementation type.
            </summary>
        </member>
        <member name="T:Functional.CQS.AOP.IoC.SimpleInjector.TypeExtensions">
            <summary>
            Extension methods for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Functional.CQS.AOP.IoC.SimpleInjector.TypeExtensions.GetClosedGenericInterfaceTypeFromOpenGenericInterfaceType(System.Type,System.Type)">
            <summary>
            Analyzes a type and returns a closed generic interface (i.e. typeof(IFoo&lt;int&gt;)) if that type implements the open generic interface (i.e. typeof(IFoo&lt;&gt;)).
            </summary>
            <param name="type">The type to analyze.</param>
            <param name="openGenericInterfaceType">The open generic interface type (i.e. typeof(IFoo&lt;&gt;), typeof(IBar&lt;,&gt;)).</param>
            <returns></returns>
        </member>
        <member name="M:Functional.CQS.AOP.IoC.SimpleInjector.TypeExtensions.GetClosedGenericInterfaceTypeFromOpenGenericInterfaceTypes(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Analyzes a type and returns a closed generic interface (i.e. typeof(IFoo&lt;int&gt;)) if that type implements any open generic interface specified (i.e. typeof(IFoo&lt;&gt;)).
            </summary>
            <param name="type">The type to analyze.</param>
            <param name="openGenericInterfaceTypes">The open generic interface types (i.e. typeof(IFoo&lt;&gt;), typeof(IBar&lt;,&gt;)).</param>
            <returns></returns>
        </member>
        <member name="M:Functional.CQS.AOP.IoC.SimpleInjector.TypeExtensions.GetGenericParametersForQueryHandlerType(System.Type)">
            <summary>
            Analyzes a <see cref="T:Functional.CQS.IQueryHandler`2"/> or <see cref="T:Functional.CQS.IAsyncQueryHandler`2"/> type and returns <see cref="M:Functional.Option.Some``1(``0)"/> of TQuery, TResult type; otherwise, return <see cref="M:Functional.Option.None``1"/>.
            </summary>
            <param name="type">The type to analyze.</param>
            <returns></returns>
        </member>
        <member name="M:Functional.CQS.AOP.IoC.SimpleInjector.TypeExtensions.GetGenericParametersForResultCommandHandlerType(System.Type)">
            <summary>
            Analyzes a <see cref="T:Functional.CQS.ICommandHandler`2"/> or <see cref="T:Functional.CQS.IAsyncCommandHandler`2"/> type and returns <see cref="M:Functional.Option.Some``1(``0)"/> of TCommand, TError type; otherwise, return <see cref="M:Functional.Option.None``1"/>.
            </summary>
            <param name="type">The type to analyze.</param>
            <returns></returns>
        </member>
    </members>
</doc>
